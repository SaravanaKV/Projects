/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/cd130b31-877d-4847-ae5c-ed36c22090da 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int n_SENSORNPK;
  CloudPercentage soilmoisture1;
  CloudPercentage soilmoisture2;
  CloudPercentage soilmoisture3;
  bool relay;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
int _moisture1,_moisture2,_moisture3;
int sensor_analog1,sensor_analog2,sensor_analog3;
const int sensor_pin3 = 34;  /* Soil moisture sensor O/P pin */ 
const int sensor_pin2 = 36;  /* Soil moisture sensor O/P pin */ 
const int sensor_pin1 = 39;  /* Soil moisture sensor O/P pin */ 
#include "thingProperties.h"
#include <HardwareSerial.h>

#define TX_PIN 17
#define RX_PIN 16
#define DE_RE_PIN 4

HardwareSerial MySerial(1); // Use UART1

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  pinMode(sensor_pin3, INPUT);
  pinMode(sensor_pin2, INPUT);
  pinMode(sensor_pin1, INPUT);
  pinMode (18, OUTPUT);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();


    Serial.begin(115200);
  MySerial.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN); // Begin serial communication at 9600 baud rate

  pinMode(DE_RE_PIN, OUTPUT);
  digitalWrite(DE_RE_PIN, LOW); // Initially set to receive mode

  delay(1000); // Wait for the sensor to initialize
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  sensor_analog1 = analogRead(sensor_pin3);
  _moisture1 = ( 100 - ( (sensor_analog1/4095.00) * 100 ) );
  Serial.println("Moisture 1 = ");
  Serial.print(_moisture1);  /* Print Temperature on the serial window */
  Serial.println("%");
  delay(1000);              /* Wait for 1000mS */
  soilmoisture1=_moisture1;

  sensor_analog2 = analogRead(sensor_pin2);
  _moisture2 = ( 100 - ( (sensor_analog2/4095.00) * 100 ) );
  Serial.println("Moisture 2 = ");
  Serial.print(_moisture2);  /* Print Temperature on the serial window */
  Serial.println("%");
  delay(1000);              /* Wait for 1000mS */
  soilmoisture2=_moisture2;

  sensor_analog3 = analogRead(sensor_pin3);
  _moisture3 = ( 100 - ( (sensor_analog3/4095.00) * 100 ) );
  Serial.println("Moisture 3 = ");
  Serial.print(_moisture3);  /* Print Temperature on the serial window */
  Serial.println("%");
  delay(1000);              /* Wait for 1000mS */
  soilmoisture3=_moisture3;
//....................................................................................................
  {
  // Example of sending a request to the NPK sensor
  byte request[] = {0x01, 0x03, 0x00, 0x00, 0x00, 0x03, 0x05, 0xCB}; // Example Modbus request frame
  sendRequest(request, sizeof(request));

  delay(1000); // Wait for the response

  // Read the response from the NPK sensor
  if (MySerial.available()) {
    byte response[9]; // Response length will depend on your sensor
    MySerial.readBytes(response, 9);

    // Process the response (this is an example, modify according to your sensor's protocol)
    int nitrogen = (response[3] << 8) | response[4];
    int phosphorus = (response[5] << 8) | response[6];
    int potassium = (response[7] << 8) | response[8];
    Serial.print("Nitrogen: ");
    Serial.print(nitrogen);
    Serial.print(" mg/Kg, Phosphorus: ");
    Serial.print(phosphorus);
    Serial.print(" mg/Kg, Potassium: ");
    Serial.println(potassium);
    n_SENSORNPK=nitrogen;
  }
  delay(1000); // Wait before sending the next request
} 
}
void sendRequest(byte *request, size_t length) {
  digitalWrite(DE_RE_PIN, HIGH); // Set to transmit mode
  MySerial.write(request, length);
  MySerial.flush(); // Wait for the transmission to complete
  digitalWrite(DE_RE_PIN, LOW); // Set to receive mode
}
/*
  Since Relay is READ_WRITE variable, onRelayChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRelayChange()  {
   if (relay==1)
  {
    digitalWrite (18, HIGH);
  }
  else
  {
    digitalWrite (18, LOW);
  }
  // Add your code here to act upon Relay change
}